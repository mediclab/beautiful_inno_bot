use crate::bot::get_user_text;
use crate::Application;
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    Document, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, MessageKind,
};

pub struct MessageHandler {
    pub app: Arc<Application>,
    pub msg: Message,
}

const MAX_FILE_SIZE: u32 = 15 * 1024 * 1024;

impl MessageHandler {
    pub async fn handle(msg: Message, app: Arc<Application>) -> anyhow::Result<()> {
        let handler = Self { app, msg };

        if let MessageKind::Common(_) = handler.msg.kind {
            if handler.msg.chat.is_private() {
                handler.private().await?;
            }
        }

        Ok(())
    }

    async fn private(&self) -> anyhow::Result<()> {
        if let Some(doc) = self.msg.document() {
            if let Some(doc_mime) = doc.to_owned().mime_type {
                match doc_mime.type_() {
                    mime::IMAGE => {
                        if doc.to_owned().file.size < MAX_FILE_SIZE {
                            return self.send_to_moderation(doc).await;
                        }

                        self.app.bot
                            .send_message(self.msg.chat.id, "üòî –ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–∫—É –±–æ–ª—å—à–µ 15 –ú–±. –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä.")
                            .await?;
                    }
                    _ => {
                        self.app.bot
                            .send_message(self.msg.chat.id, "üòî –ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ —Ç–∏–ø —Ñ–∞–π–ª–∞. –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞.")
                            .await?;
                    }
                }
            }

            return Ok(());
        }

        self.app.bot
            .send_message(self.msg.chat.id, "üòî –ü—Ä–æ—Å—Ç–∏, —è –ø—Ä–∏–Ω–∏–º–∞—é —Ñ–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –¢–∞–∫ –Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞, –∏ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç —Å–∫–∞—á–∞—Ç—å —Ö–æ—Ä–æ—à—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")
            .await?;

        Ok(())
    }

    async fn send_to_moderation(&self, doc: &Document) -> anyhow::Result<()> {
        self.app
            .bot
            .send_document(
                ChatId(self.app.admin),
                InputFile::file_id(doc.to_owned().file.id),
            )
            .caption(format!(
                "–ê–≤—Ç–æ—Ä: {}",
                get_user_text(self.msg.from().unwrap())
            ))
            .reply_markup(InlineKeyboardMarkup::new(vec![vec![
                InlineKeyboardButton::callback("üëç –ó–∞–ø–æ—Å—Ç–∏—Ç—å", "approve"),
                InlineKeyboardButton::callback("üëé –û—Ç–∫–∞–∑–∞—Ç—å", "decline"),
            ]]))
            .await?;

        self.app.bot
            .send_message(self.msg.chat.id, "üòª –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–∫–∏! –û—Ç–ø—Ä–∞–≤–∏–ª –∏—Ö –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ò—â–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
            .await?;

        Ok(())
    }
}
