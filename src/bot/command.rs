use crate::bot::{Bot, BotManager};
use crate::db::entity::prelude::{Ban, Photos};
use crate::Application;
use std::sync::Arc;
use teloxide::macros::BotCommands;
use teloxide::prelude::*;

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç:")]
pub enum BotCommand {
    #[command(description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")]
    Help,
    #[command(description = "–°—Ç–∞—Ä—Ç")]
    Start,
    #[command(description = "–ó–∞–±–∞–Ω–∏—Ç—å", hide)]
    Ban,
}

pub struct CommandHandler {
    pub app: Arc<Application>,
    pub bot: Bot,
    pub msg: Message,
}

impl CommandHandler {
    pub async fn handle(bot: Bot, msg: Message, cmd: BotCommand, app: Arc<Application>) -> anyhow::Result<()> {
        let handler = Self { app, bot, msg };

        if !handler.msg.chat.is_private() {
            return Ok(());
        }

        if Ban::exists(handler.msg.chat.id.0).await {
            return Ok(());
        }

        match cmd {
            BotCommand::Help => {
                handler.help().await?;
            }
            BotCommand::Start => {
                handler.start().await?;
            }
            BotCommand::Ban => {
                handler.ban().await?;
            }
        };

        Ok(())
    }

    async fn help(&self) -> anyhow::Result<()> {
        self.bot
            .send_message(self.msg.chat.id, format!("–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {}", &self.app.config.version))
            .await?;

        Ok(())
    }

    async fn start(&self) -> anyhow::Result<()> {
        self.bot
            .send_message(self.msg.chat.id, "ü§ü –ü—Ä–∏–≤–µ—Ç, –∏–Ω–Ω–æ–ø–æ–ª–∏—Å—è–Ω–∏–Ω!\n\n–†–∞–¥, —á—Ç–æ —Ç—ã –∑–∞–≥–ª—è–Ω—É–ª!\n\n–ü—Ä–∏—Å—ã–ª–∞–π —Å—é–¥–∞ —Å–≤–æ–∏ —Ñ–æ—Ç–∫–∏ –≥–æ—Ä–æ–¥–∞ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤, —è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—é –∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —è –∏—Ö –≤—ã–ª–æ–∂—É –≤ –∫–∞–Ω–∞–ª:\nhttps://t.me/beautiful_innopolis\n\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ —Å–¥–µ–ª–∞—é –≤ –ª—É—á—à–µ–º –≤–∏–¥–µ! üëå")
            .await?;

        Ok(())
    }

    async fn ban(&self) -> anyhow::Result<()> {
        let manager = BotManager::global();

        if manager.admin_id != self.msg.from.as_ref().unwrap().id.0 as i64 {
            return Ok(());
        }

        if let Some(reply) = self.msg.reply_to_message() {
            let photo = Photos::get_by_msg_id(reply.id.0).await;
            Ban::user(photo.unwrap().user_id, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞").await;

            self.bot.send_message(self.msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω").await?;

            self.bot.delete_message(self.msg.chat.id, reply.id).await?;
        }

        self.bot.delete_message(self.msg.chat.id, self.msg.id).await?;

        Ok(())
    }
}
