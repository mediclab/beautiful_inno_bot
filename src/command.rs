use std::sync::Arc;
use teloxide::macros::BotCommands;
use teloxide::prelude::*;

use crate::Application;

#[derive(BotCommands, Clone)]
#[command(
    rename_rule = "lowercase",
    description = "–ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç:"
)]
pub enum BotCommand {
    #[command(description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")]
    Help,
    #[command(description = "–°—Ç–∞—Ä—Ç")]
    Start,
}

pub struct CommandHandler {
    pub app: Arc<Application>,
    pub msg: Message,
}

impl CommandHandler {
    pub async fn handle(
        msg: Message,
        cmd: BotCommand,
        app: Arc<Application>,
    ) -> anyhow::Result<()> {
        let handler = Self { app, msg };

        if !handler.msg.chat.is_private() {
            return Ok(());
        }

        match cmd {
            BotCommand::Help => {
                handler.help().await?;
            }
            BotCommand::Start => {
                handler.start().await?;
            }
        };

        Ok(())
    }

    async fn help(&self) -> anyhow::Result<()> {
        self.app
            .bot
            .send_message(
                self.msg.chat.id,
                format!("–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {}", self.app.version),
            )
            .await?;

        Ok(())
    }

    async fn start(&self) -> anyhow::Result<()> {
        self.app.bot
            .send_message(self.msg.chat.id, "ü§ü –ü—Ä–∏–≤–µ—Ç, –∏–Ω–Ω–æ–ø–æ–ª–∏—Å—è–Ω–∏–Ω!\n\n–†–∞–¥, —á—Ç–æ —Ç—ã –∑–∞–≥–ª—è–Ω—É–ª!\n\n–ü—Ä–∏—Å—ã–ª–∞–π —Å—é–¥–∞ —Å–≤–æ–∏ —Ñ–æ—Ç–∫–∏ –≥–æ—Ä–æ–¥–∞ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤, —è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—é –∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —è –∏—Ö –≤—ã–ª–æ–∂—É –≤ –∫–∞–Ω–∞–ª:\nhttps://t.me/beautiful_innopolis\n\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ —Å–¥–µ–ª–∞—é –≤ –ª—É—á—à–µ–º –≤–∏–¥–µ! üëå")
            .await?;

        Ok(())
    }
}
