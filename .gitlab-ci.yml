stages:
  - lint
  - prepare
  - build
  - release
# - deploy

default:
  tags:
    - docker

lint:
  stage: lint
  image: $CI_REGISTRY/library/rust:latest
  except:
    - master
  script:
    - cargo fmt --all -- --check
    - cargo clippy -- -D warnings

prepare_job:
  stage: prepare
  inherit:
    default: false
  only:
    - master
  script:
    - APP_VERSION=$(cat Cargo.toml | grep -A3 '^\[package\]$' | grep -Po '(?<=^version = ")[^"]*(?=".*)')
    - if [ $(git tag -l "$APP_VERSION") ]; then echo "Version $APP_VERSION already exists"; exit 1; fi
    - echo "APP_VERSION=$APP_VERSION" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

build_job:
  stage: build
  needs:
    - job: prepare_job
      artifacts: true
  only:
    - master
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build
      --build-arg "BOT_VERSION=$APP_VERSION"
      -f Dockerfile-prod
      -t $CI_REGISTRY_IMAGE:latest
      -t $CI_REGISTRY_IMAGE:$APP_VERSION
      -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      .
    - docker push -a $CI_REGISTRY_IMAGE

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_job
      artifacts: true
    - job: build_job
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "running release_job for $APP_VERSION"
  release:
    name: 'Release v.$APP_VERSION'
    description: 'New release'
    tag_name: '$APP_VERSION'
    ref: '$CI_COMMIT_SHA'