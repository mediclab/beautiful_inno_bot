stages:
  - lint
  - prepare
  - build
  - release
# - deploy

variables:
  IMAGE_TITLE: "Beautiful INNO Bot"
  IMAGE_DESCRIPTION: "Bot for posting photos with exif"

default:
  tags:
    - docker

lint:
  stage: lint
  image: $CI_REGISTRY/library/rust:latest
  except:
    - master
    - tags
  script:
    - echo $CI_MERGE_REQUEST_LABELS
#    - cargo fmt --all -- --check
#    - cargo clippy -- -D warnings

prepare_job:
  stage: prepare
  inherit:
    default: false
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo $CI_MERGE_REQUEST_LABELS
    - apt install -y jq curl
    - APP_VERSION=$(cat Cargo.toml | grep -A3 '^\[package\]$' | grep -Po '(?<=^version = ")[^"]*(?=".*)')
    - if [ $(git tag -l "$APP_VERSION") ]; then echo "Version $APP_VERSION already exists"; exit 1; fi
    - echo "APP_VERSION=$APP_VERSION" >> variables.env
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$APP_VERSION" | jq -r .notes > release_notes.md'
  artifacts:
    paths:
      - release_notes.md
    reports:
      dotenv: variables.env

build_job_amd:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: prepare_job
      artifacts: true
  before_script:
    - apk add --no-cache jq
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker context create tls-environment
    - docker buildx create --name docker-builder --driver docker-container --use tls-environment
  script:
    - docker buildx build
      --build-arg "BOT_VERSION=$APP_VERSION"
      --label "org.opencontainers.image.title=$IMAGE_TITLE"
      --label "org.opencontainers.image.description=$IMAGE_DESCRIPTION"
      --label "org.opencontainers.image.vendor=$GITLAB_USER_LOGIN"
      --label "org.opencontainers.image.authors=$CI_COMMIT_AUTHOR"
      --output "type=image,name=$CI_REGISTRY_IMAGE,push-by-digest=true,name-canonical=true,push=true"
      --metadata-file metadata.json
      --file Dockerfile-prod
      .
    - mkdir -p digests/
    - digest="$(jq -r '.["containerimage.digest"]' metadata.json)"
    - touch digests/${digest#sha256:}
  artifacts:
    paths:
      - digests/*
    expire_in: 1 day

build_job_arm:
  stage: build
  tags:
    - arm64
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: prepare_job
      artifacts: true
  before_script:
    - apk add --no-cache jq
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker context create tls-environment
    - docker buildx create --name docker-builder --driver docker-container --use tls-environment
  script:
    - docker buildx build
      --build-arg "BOT_VERSION=$APP_VERSION"
      --label "org.opencontainers.image.title=$IMAGE_TITLE"
      --label "org.opencontainers.image.description=$IMAGE_DESCRIPTION"
      --label "org.opencontainers.image.vendor=$GITLAB_USER_LOGIN"
      --label "org.opencontainers.image.authors=$CI_COMMIT_AUTHOR"
      --output "type=image,name=$CI_REGISTRY_IMAGE,push-by-digest=true,name-canonical=true,push=true"
      --metadata-file metadata.json
      --file Dockerfile-prod
      .
    - mkdir -p digests/
    - digest="$(jq -r '.["containerimage.digest"]' metadata.json)"
    - touch digests/${digest#sha256:}
  artifacts:
    paths:
      - digests/*
    expire_in: 1 day

manifest_merge:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: prepare_job
      artifacts: true
    - job: build_job_arm
      artifacts: true
    - job: build_job_amd
      artifacts: true
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - cd digests
    - docker buildx imagetools create
      --tag $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$APP_VERSION
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      $(printf "$CI_REGISTRY_IMAGE@sha256:%s " *)

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_job
      artifacts: true
    - job: manifest_merge
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "running release_job for $APP_VERSION"
  release:
    name: 'Release v.$APP_VERSION'
    description: release_notes.md
    tag_name: '$APP_VERSION'
    ref: '$CI_COMMIT_SHA'
    assets:
      links:
        - name: 'Container Image Tag $APP_VERSION'
          url: "https://$CI_REGISTRY_IMAGE:$APP_VERSION"